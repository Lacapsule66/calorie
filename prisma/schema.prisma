generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String             @db.VarChar(64)
  password          String?            @db.VarChar(64)
  name              String?
  profile           UserProfile?       // Relation optionnelle vers UserProfile

  // Relations vers WeightTracking directement
  weightTracking    WeightTracking[]   @relation("UserToWeightTracking")

  // Autres relations et champs
  chats             Chat[]
  reservations      Reservation[]
  aliments          Aliment[]
  dailyConsumptions DailyConsumption[]
}

model UserProfile {
  id             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  age            Int
  weight         Float
  height         Float
  objectif       String
  sportFrequency String
  userId         String            @unique @db.Uuid
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Relation vers WeightTracking
  weightTracking WeightTracking[]  @relation("UserProfileToWeightTracking")
}

model WeightTracking {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date           DateTime      @db.Date
  weight         Float
  userId         String?       @db.Uuid   // Relation optionnelle vers User
  user           User?         @relation("UserToWeightTracking", fields: [userId], references: [id], onDelete: Cascade)
  
  userProfileId  String?       @db.Uuid   // Relation optionnelle vers UserProfile
  userProfile    UserProfile?  @relation("UserProfileToWeightTracking", fields: [userProfileId], references: [id], onDelete: Cascade)

  @@unique([userProfileId, date, userId]) // Unicité pour empêcher plus d'une entrée par jour pour un profil utilisateur
}
model Chat {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @db.Timestamp(6)
  messages  Json     @db.Json
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Chat_userId_User_id_fk")
}

model Reservation {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt           DateTime @db.Timestamp(6)
  details             Json     @db.Json
  hasCompletedPayment Boolean  @default(false)
  userId              String   @db.Uuid
  user                User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Reservation_userId_User_id_fk")
}

model Aliment {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quantite Int?
  aliment           String
  calories          Float
  glucides          Float
  lipides           Float
  proteines         Float
  userId            String             @db.Uuid
  user              User               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dailyConsumptions DailyConsumption[] @relation("AlimentToDailyConsumption")
  createdAt         DateTime           @default(now())
}

model DailyConsumption {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date       DateTime  @db.Date
  quantity   Int       @default(1)
  userId     String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  alimentId  String?   @db.Uuid
  aliment    Aliment?  @relation("AlimentToDailyConsumption", fields: [alimentId], references: [id], onDelete: Cascade)
  
  calories   Float     
  glucides   Float
  lipides    Float
  proteines  Float

  @@unique([userId, date]) // Clé composite pour garantir l'unicité de userId et date
}
